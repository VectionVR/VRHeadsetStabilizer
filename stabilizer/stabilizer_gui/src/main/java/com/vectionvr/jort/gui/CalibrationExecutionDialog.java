package com.vectionvr.jort.gui;

import com.vectionvr.jort.jython.PythonExecuter;
import com.vectionvr.jort.serial.ImuCalibration;
import com.vectionvr.jort.serial.SampleData;
import com.vectionvr.jort.serial.SensorException;
import java.util.List;
import static javax.swing.SwingUtilities.invokeLater;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author nico
 */
public class CalibrationExecutionDialog extends javax.swing.JDialog {

    private static final Logger LOGGER = LoggerFactory.getLogger(CalibrationExecutionDialog.class);
    private SampleData sampleData;
    private String portName;
    private List<Double> accelerometerData;
    private List<Double> magnetometerData;

    /**
     * Creates new form CalibrationExecutionDialog
     */
    public CalibrationExecutionDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Calibrate - Step 2");
        setModal(true);
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        mainLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainLabel.setText("Computing /Merging calibration data. Please wait ...");

        progressBar.setMaximum(1);

        saveButton.setText("Save");
        saveButton.setEnabled(false);
        saveButton.setMaximumSize(new java.awt.Dimension(100, 29));
        saveButton.setMinimumSize(new java.awt.Dimension(100, 29));
        saveButton.setPreferredSize(new java.awt.Dimension(100, 29));
        saveButton.setSize(new java.awt.Dimension(100, 29));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.setMaximumSize(new java.awt.Dimension(100, 29));
        cancelButton.setMinimumSize(new java.awt.Dimension(100, 29));
        cancelButton.setPreferredSize(new java.awt.Dimension(100, 29));
        cancelButton.setSize(new java.awt.Dimension(100, 29));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(101, Short.MAX_VALUE)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        mainLabel.setText("Saving data to device");
        new Thread(new Runnable() {
            @Override
            public void run() {
                startProgress();
                ImuCalibration imuCalibration = new ImuCalibration(portName);
                try {
                    imuCalibration.connect();
                    imuCalibration.saveAccelerometerCalibrationData(accelerometerData);
                    imuCalibration.saveMagnetometerCalibrationData(magnetometerData);
                    imuCalibration.commitToEeprom();
                    imuCalibration.disconnect();
                } catch (SensorException e) {
                    // handle error
                }
                cancelButton.setText("Close");
                stopProgress();
                saveButton.setEnabled(false);
                mainLabel.setText("Save to device successfull");
            }

        }).start();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void startProgress() {
        invokeLater(new Runnable() {
            @Override
            public void run() {
                progressBar.setIndeterminate(true);
                cancelButton.setEnabled(false);
            }
        });
    }

    private void stopProgress() {
        invokeLater(new Runnable() {
            @Override
            public void run() {
                progressBar.setIndeterminate(false);
                progressBar.setValue(1);
                cancelButton.setEnabled(true);
            }
        });
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        new Thread(new Runnable() {
            @Override
            public void run() {
                startProgress();
                PythonExecuter pythonExecuter = new PythonExecuter();
                accelerometerData = pythonExecuter.getCalibrationData(sampleData.getAccelerometerValues());
                magnetometerData = pythonExecuter.getCalibrationData(sampleData.getMagnetometerValues());
                saveButton.setEnabled(true);
                mainLabel.setText("Press save button to send data to device.");
                stopProgress();
            }
        }).start();
    }//GEN-LAST:event_formWindowOpened


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel mainLabel;
    private final javax.swing.JProgressBar progressBar = new javax.swing.JProgressBar();
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

    void setSamples(SampleData samples) {
        this.sampleData = samples;
    }

    public void setPortName(String portName) {
        this.portName = portName;
    }
}
